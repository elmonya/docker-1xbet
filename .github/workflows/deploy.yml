name: Build and Deploy to Azure VM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        options: 
        - production
        - staging
        required: true
        default: 'staging'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}

jobs:
  validate:
    name: Validate Docker Compose Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Validate docker-compose.yml
        run: docker-compose config -q
        
      - name: Validate docker-compose.prod.yml
        run: docker-compose -f docker-compose.prod.yml config -q

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and push WordPress image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.wordpress
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/1xbet-aviator-wordpress:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/1xbet-aviator-wordpress:latest
          cache-to: type=inline
          
      - name: Build and push Caddy image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.caddy
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/1xbet-aviator-caddy:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/1xbet-aviator-caddy:latest
          cache-to: type=inline

  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Create .env file
        run: |
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "WORDPRESS_DEBUG=0" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
      
      - name: Copy files to Azure VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          port: ${{ secrets.AZURE_VM_SSH_PORT }}
          source: "./, !node_modules/, !.git/"
          target: "/home/${{ secrets.AZURE_VM_USERNAME }}/docker_wordpress"
          rm: false
          
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          port: ${{ secrets.AZURE_VM_SSH_PORT }}
          script: |
            cd /home/${{ secrets.AZURE_VM_USERNAME }}/docker_wordpress
            
            # Создаем директорию для логов, если еще не существует
            mkdir -p logs/caddy
            
            # Останавливаем текущие контейнеры
            docker-compose down -v
            
            # Обновляем образы
            docker-compose -f docker-compose.prod.yml pull
            
            # Запускаем контейнеры
            docker-compose -f docker-compose.prod.yml up -d
            
            # Проверяем статус
            docker-compose -f docker-compose.prod.yml ps
            
            # Выводим логи для проверки запуска
            docker-compose -f docker-compose.prod.yml logs --tail=20
            
            echo "Deployment completed" 